import torchvision.transforms as transforms
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
from torch.autograd import Variable
import torch

import IC.colorECV as colorECV
from IC.ImageData import ImageData
from IC.Utils import postprocess_tens_new


def color_prediction(img):
    transform = transforms.Compose(
                [
                    transforms.Resize((400,400)),
                    transforms.ToTensor()
                ]
            )
    dataloader = DataLoader(
        ImageData(img, transform),
    )

    #----------------------------
    # Initialization and Prediction
    #----------------------------

    # model Epoch No. if want to change in future
    modelnum = 60
    
    generator = colorECV.color_ecv(in_channels = 3)
    generator.load_state_dict(torch.load(f"IC/models/generator_{modelnum-1}.pth", map_location=torch.device('cpu')))    

    Tensor = torch.Tensor

    # only 1 image in dataset
    imgs = dataloader.dataset[1]


    # imgs_black : Light Channel of the Image in Model Shape
    # imgs_black_orig : Light Channel of the Image in Original Image Shape
    # gen_ab : A and B channel generated by the generator
    # gen_color : Colourfull Image generated by the Generator after postprocessing
    
    # Configure model input
    imgs_black = Variable(imgs["black"].unsqueeze(0).type(Tensor))
    imgs_black_orig = Variable(imgs["orig"].unsqueeze(0).type(Tensor))

    # Generate a high resolution image from low resolution input
    gen_ab = generator(imgs_black)
    gen_color = postprocess_tens_new(imgs_black_orig, gen_ab)
    gen_color = make_grid(torch.tensor(gen_color), nrow=1, normalize=True)
    imgs_black_orig = make_grid(imgs_black_orig, nrow=1, normalize=True )

    return gen_color, imgs_black_orig